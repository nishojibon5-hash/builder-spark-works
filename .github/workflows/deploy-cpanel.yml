name: 🚀 Deploy to cPanel Hosting

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".gitignore"
      - "docs/**"
      - "CPANEL_DEPLOYMENT.md"
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'

jobs:
  deploy-cpanel:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application for cPanel
        run: |
          npm run build:cpanel
          echo "✅ Build completed successfully"

      - name: 📝 Update Database Config
        run: |
          # Update database configuration with production values
          sed -i "s/your_database_name/${{ secrets.CPANEL_DB_NAME }}/g" cpanel/config/database.php
          sed -i "s/your_username/${{ secrets.CPANEL_DB_USER }}/g" cpanel/config/database.php
          sed -i "s/your_password/${{ secrets.CPANEL_DB_PASS }}/g" cpanel/config/database.php
          sed -i "s/your_jwt_secret_key_here/${{ secrets.JWT_SECRET_KEY }}/g" cpanel/auth/auth.php
          echo "✅ Database configuration updated"

      - name: 🔄 Create Backup Script
        run: |
          cat > backup-info.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "commit_hash": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "deployed_by": "${{ github.actor }}",
            "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}"
          }
          EOF
          cp backup-info.json cpanel-package/

      - name: 🚀 Deploy to cPanel via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.CPANEL_FTP_HOST }}
          username: ${{ secrets.CPANEL_FTP_USER }}
          password: ${{ secrets.CPANEL_FTP_PASS }}
          local-dir: ./cpanel-package/
          server-dir: ${{ secrets.CPANEL_SERVER_DIR }}
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.env
            **/backup-info.json.backup

      - name: 🗄️ Run Database Migrations
        run: |
          # Call database migration endpoint
          curl -X POST "${{ secrets.CPANEL_SITE_URL }}/api/migrate" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.MIGRATION_TOKEN }}" \
            -d '{"force": true}' || echo "Migration endpoint not available"

      - name: 🧪 Health Check
        run: |
          echo "🔍 Checking deployment health..."
          
          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.CPANEL_SITE_URL }}")
          
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ Site is accessible (HTTP $HTTP_STATUS)"
          else
            echo "❌ Site health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Check API endpoint
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.CPANEL_SITE_URL }}/api/health" || echo "000")
          
          if [ $API_STATUS -eq 200 ]; then
            echo "✅ API is working (HTTP $API_STATUS)"
          else
            echo "⚠️ API health check failed (HTTP $API_STATUS)"
          fi

      - name: 📊 Update Deployment Status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          
          if [ "$STATUS" = "success" ]; then
            echo "✅ Deployment completed successfully!"
            
            # Optional: Send success notification
            curl -X POST "${{ secrets.CPANEL_SITE_URL }}/api/deployment/notify" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "success",
                "deployment_id": "${{ github.run_id }}",
                "commit": "${{ github.sha }}",
                "message": "Deployment successful",
                "url": "${{ secrets.CPANEL_SITE_URL }}"
              }' || true
          else
            echo "❌ Deployment failed!"
          fi

      - name: 📨 Send Discord Notification
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🏦 **LoanBondhu Deployment**
            
            **Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
            **Site:** ${{ secrets.CPANEL_SITE_URL }}
            **Commit:** `${{ github.sha }}`
            **Branch:** `${{ github.ref_name }}`
            **Deployed by:** ${{ github.actor }}
            
            ${{ job.status == 'success' && '🚀 Site updated successfully!' || '💥 Deployment failed - check logs' }}

  backup-deployment:
    runs-on: ubuntu-latest
    needs: deploy-cpanel
    if: success()
    
    steps:
      - name: 💾 Create Deployment Backup Record
        run: |
          echo "Creating backup record for deployment ${{ github.run_id }}"
          
          # Store deployment info for potential rollback
          curl -X POST "${{ secrets.CPANEL_SITE_URL }}/api/deployment/backup" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.BACKUP_TOKEN }}" \
            -d '{
              "deployment_id": "${{ github.run_id }}",
              "commit_hash": "${{ github.sha }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "deployed_at": "${{ steps.date.outputs.date }}",
              "status": "deployed"
            }' || echo "Backup recording failed - continuing anyway"
